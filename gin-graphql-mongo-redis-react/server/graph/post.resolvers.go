package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"go.mongodb.org/mongo-driver/mongo"
	"learn.go/gin-graphql-mongo-redis/config"
	"learn.go/gin-graphql-mongo-redis/server/graph/model"
	mongoRepo "learn.go/gin-graphql-mongo-redis/server/repository/mongo"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: CreatePost - createPost"))
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	postCollection := config.MongoDbPool.Collection("posts")
	postQueryRepository := mongoRepo.NewGenericMongoQueryRepository[model.Post](postCollection)
	return postQueryRepository.AggregateData(ctx, mongo.Pipeline{})
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, input *model.FetchPost) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
